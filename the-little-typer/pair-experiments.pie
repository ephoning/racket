#lang pie


; Pair experiments
; note: 'Pair' is a type constructor


(claim PairAN U)
(define PairAN (Pair Atom Nat))
(claim PairAA U)
(define PairAA (Pair Nat Nat))

(the PairAN (cons 'foo 42))
(the PairAA (cons 123 456))


; ==============
(the (the U Atom) 'a)


; polymorphism experiment with 'U'
((the (-> U Atom Atom) (λ (t a) 'foo)) Nat 'bar)

; note: Π specifies a funnction type
(claim NtoN U)
(define NtoN (Π ((x Nat)) Nat))

((the NtoN (λ (x) 42)) 123)
  
; Either
(the (Either Nat Atom) (right 'foo))
(the (Either Nat Atom) (left 42))

; Either elimination example
(claim Etest (→ (Either Nat Atom) Nat))
(define Etest
  (λ (x)
    (ind-Either
      x
      (λ (e) Nat)
      (λ (l) l)
      (λ (r) 42))))
; tests:
(Etest (left 123))
(Etest (right 'foo))

